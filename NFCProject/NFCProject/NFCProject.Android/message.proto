syntax = "proto3";
package NFCProject.iOS;

enum MessageType {
      NODE_LED_FLASH = 0;
      /*Altough its possible to decode whether a message is unicast or broadcast they have been
      specificed here to eliminate confusion and to make it easier for the decoding process*/
      NODE_UNICAST_CONFIG = 1;
      NODE_BROADCAST_CONFIG = 2;
      NODE_REQUEST_CONFIG = 3;
}
enum NodeConfiguration {
         DESK_1M = 0;
         DESK_2M = 1;
         CEILING_1M = 2;
         CEILING_2M = 3;
}

/*Node Operating Mode*/
enum NodeOperatingMode {
   RUN = 0;
   INVENTORY = 1;
}

message RX1_Request {

   MessageType messageType = 1;
   int32 messageID = 2; //Random number to identify the message.  This will be sent back in the acknowledge
   /*The following are not used in all messages*/

   message Node_Config_Payload{
      /*Network ID*/
      int32 networkID = 1;
      bool hasNetworkID = 2;
      /*Network Channel*/
      int32 networkChannel = 3;
      bool hasNetworkChannel = 4;
      /*Node Configuration*/

      NodeConfiguration nodeConfiguration = 5;
      bool hasNodeConfiguration = 6;

      NodeOperatingMode operatingMode = 7;
      bool hasOperatingMode = 8;
      /*Feature Lock*/
      bool featureLock = 9;
      bool hasFeatureLock = 10;
      /*Delay*/
      int32 delay = 11;
   }

   /*It is up to the sender receiver to select the payload based on the type field*/
   oneof payload {
      Node_Config_Payload nodeConfigPayload = 3;
      bool nullPayload  = 4; //To use set as true.  This is used in messages that do not have a payload
   }
}

message RX1_Acknowledge {
   MessageType messageType = 1;
   int32 messageID = 2; //Random number to identify the message.  This will be sent back in the acknowledge
   /*The time at which the node plans to make the update calculated as an offset from the message sent timestamp*/
   int32 updateTime = 3;
}

message RX1_Uplink_Config{
   uint32 nodeID = 1;
   uint32 networkID = 2;
   uint32 networkChannel = 3;
   uint32 hardwareVersion = 4;
   uint32 softwareVersion = 5;
   message WirepassVersion{
      uint32 devel = 1;
      uint32 maint = 2;
      uint32 minor = 3;
      uint32 major = 4;
   }
   WirepassVersion wirepasVersion = 6;
   NodeConfiguration nodeConfiguration = 7;
   NodeOperatingMode operatingMode = 8;
   //App area id
   uint32 applicationAreaID = 9;
   //head node rssi
   uint32 headNodeRSSI = 10;
   //bat vol
   uint32 batteryVoltage = 11; //encoded as *100 ie 3.6 = 360
   //gateway sn
   bool gatewayConnected = 12;
   uint32 messageID = 13;
}

message RX_Uplink_Manufacturing_Results {
   uint32 nodeID = 1;
   uint32 pirCount = 2;
   uint32 irTemp = 3;
   uint32 ambientTemp = 4;
   uint32 ambientLight = 5;
   uint32 microphone = 6;
   uint32 button = 7;
   bool gatewayConnected = 8;
   uint32 battery = 9;
}

message RX1_NFC_Reply {
   bool authenticationResult = 1;
   oneof payload{
      bytes nonce = 2; // [(nanopb).max_size = 16, (nanopb).fixed_length = true];
      bool nullPayload = 3;
      RX1_Uplink_Config nodeConfig = 4;
      RX_Uplink_Manufacturing_Results manufacturingTestResults = 5;
      bool setNodeConfigAcknowledge = 6;
   }
}

message RX1_NFC_Config {
   bool hasNetworkID = 1;
   uint32 networkID = 2;
   bool hasNetworkChannel = 3;
   uint32 networkChannel = 4;
   bool hasNodeConfiguration = 5;
   NodeConfiguration nodeConfiguration = 6;
   bool hasOperatingMode = 7;
   NodeOperatingMode operatingMode = 8;
   bool hasEncryptionKey = 9;
   bytes encryptionKey = 10; // [(nanopb).max_size = 16, (nanopb).fixed_length = true];
   bool hasAuthenticationKey = 11;
   bytes authenticationKey = 12; // [(nanopb).max_size = 16, (nanopb).fixed_length = true];
}

message RX1_NFC_Request {
   enum NFCRequestType {
         GET_NODE_CONFIG = 0;
         SET_NODE_CONFIG = 1;
         SET_NODE_CONFIG_MANUF = 2; //used in manufacturing only
   }
   NFCRequestType requestType = 1;
   bytes encryptedNonce = 2; 
   oneof payload{
      bool nullPayload = 3;
      RX1_NFC_Config nodeConfig = 4;
   }
   uint32 chksum = 5; //Used to validate nodeConfig
}
